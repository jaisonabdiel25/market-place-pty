// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}


model User {
  id       String   @id @default(uuid()) @db.Uuid
  email    String   @unique
  name     String
  firstName String
  password String
  img      String?
  createAt DateTime @default(now())
  phone    String?
  description String?
  roles    UserRole[]
  active   Boolean  @default(false)
  products Product []
  sales    Sale[]
}

model Role {
  id      String @id @default(uuid()) @db.Uuid
  name    String @unique
  User    UserRole[]
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid 
  roleId String @db.Uuid 
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String
  price       Float
  img         String?
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  active      Boolean  @default(true)
  createById  String @db.Uuid
  createBy    User     @relation(fields: [createById], references: [id])
  categoryId  String? @db.Uuid
  category  Category? @relation(fields: [categoryId], references: [id])
  images      Image[]
  SaleItem   SaleItem[]
}

model Category {
  id String @id @default(uuid()) @db.Uuid
  description String
  products Product[]
}

model Image {
  id String @id @default(uuid()) @db.Uuid
  url String
  product Product @relation(fields: [productId], references: [id])
  productId String @db.Uuid
  createAt DateTime @default(now())
}

model Sale {
  id String @id @default(uuid()) @db.Uuid
  total Float
  totalItems Int
  isPaid Boolean @default(false)
  paidAt DateTime?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  subtotal Float
  tax Float
  transactionId String?

  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  SaleItem SaleItem[]
}

model SaleItem{
  id String @id @default(uuid()) @db.Uuid
  saleId String @db.Uuid
  productId String @db.Uuid
  price Float
  sale Sale @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  createAt DateTime @default(now())
}